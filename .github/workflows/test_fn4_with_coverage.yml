# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# it does not compute code coverage, as this resulted in instability
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test findNeighbour4 with codecov

on: 
  workflow_dispatch:
    inputs:
      tags:
        description: 'Lint and unit test fn4 application, without code coverage'
  push:
    branches:
    - '*'
  pull_request:
    branches:
    - '*'

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        mongodb-version: [4.4.4]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.3.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}

    - name: Install cloned findNeighbour4 package
      run: |
        # install the findNeighbour package

        pipenv install -e `pwd` --skip-lock

    - name: Assign version
      run: |
        VERSION=`python3 setup.py --version`
        rm version.py -f
        touch version.py
        echo "version = '$VERSION'" > version.py

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        pipenv run flake8 . --count --ignore=W293,E266,E302,E251,E225,E265,W291,E501,W503,C901 --show-source --max-complexity=200 --statistics

    - name: Setup Nim 
      run: |

        mkdir external_software
        cd external_software
        wget https://nim-lang.org/download/nim-1.6.4-linux_x64.tar.xz
        tar -xf nim-1.6.4-linux_x64.tar.xz
        NIMDIR="`pwd`/nim-1.6.4/bin"
        # Append to PATH
        echo "$NIMDIR" >> $GITHUB_PATH

    - name: check nimble is available
      run: |
        # check nimble is accessible on path
        echo "Nimble version:"
        nimble --version

    - name: clone catwalk
      run: |
        # clone catwalk relatedness engine
        cd external_software
        git clone https://github.com/dvolk/catwalk.git catwalk
        
    - name: compile catwalk
      run: |
        cd external_software/catwalk
        nimble -y build -d:release -d:danger -d:no_serialisation
        echo CW_BINARY_FILEPATH=\"`pwd`/cw_server\" > ../../.env
      
    - name: Test server and client
      run: |
        python3 setup.py --version

        pipenv run python3 fn4_configure.py config/default_test_config.json --startup --n_workers 1 > test_startup.sh
        chmod +x test_startup.sh
        ./test_startup.sh
        sleep 15 
        pipenv run pytest test_server --cov=./ --cov-report=xml:coverage_server.xml
        
        # shut down server
        ./fn4_shutdown.sh config/default_test_config.json

    - name: Test modules
      run: |
        python3 setup.py --version
        pipenv run pytest test --cov=./ --cov-report=xml:coverage_modules.xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage_server.xml,coverage_modules.xml
        directory: ./
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        path_to_write_report: codecov_report.txt
        verbose: true

